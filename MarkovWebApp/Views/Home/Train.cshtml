@model MarkovWebApp.Models.TrainingViewModel
@{
    ViewData["Title"] = "Train Model";
}

<div class="text-center">
    <h1 class="display-4">Train the Brain</h1>
    <p>Provide a large block of text below. The system will learn from it, adding to its existing knowledge.</p>
</div>

<div class="row mt-4">
    <div class="col-md-8 offset-md-2">
        <form id="trainForm" asp-action="Train" method="post">
            <div class="form-group">
                <div class="d-flex justify-content-between">
                    <label asp-for="InputText" class="form-label"><h3>Training Text</h3></label>
                    <span id="estimation" class="text-muted align-self-center"></span>
                </div>
                <textarea asp-for="InputText" id="inputText" class="form-control" rows="15" placeholder="Paste a long text here..."></textarea>
            </div>
            
            <div class="form-group mt-3">
                <button type="submit" id="trainButton" class="btn btn-primary btn-lg w-100">Train Model</button>
                
                <div id="progressContainer" class="d-none mt-3">
                    <p id="progressText" class="text-center mb-1"></p>
                    <div class="progress" style="height: 20px;">
                        <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                </div>
            </div>
        </form>

        <div id="resultMessage" class="d-none alert mt-4" role="alert"></div>
    </div>
</div>

@section Scripts {
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const inputText = document.getElementById("inputText");
        const estimationSpan = document.getElementById("estimation");
        const trainForm = document.getElementById("trainForm");
        const trainButton = document.getElementById("trainButton");
        const progressContainer = document.getElementById("progressContainer");
        const progressText = document.getElementById("progressText");
        const progressBar = document.getElementById("progressBar");
        const resultMessage = document.getElementById("resultMessage");

        // Çok kaba bir performans metriği: Saniyede işlenen kelime sayısı
        const WORDS_PER_SECOND = 22.5;
        let estimatedSeconds = 0;
        let progressInterval;

        // Metin kutusu her değiştiğinde süreyi yeniden hesapla
        inputText.addEventListener('input', () => {
            const wordCount = (inputText.value.match(/\S+/g) || []).length;
            if (wordCount > 0) {
                estimatedSeconds = Math.max(1, Math.round(wordCount / WORDS_PER_SECOND));
                estimationSpan.textContent = `Estimated training time: ~${estimatedSeconds} second(s)`;
            } else {
                estimationSpan.textContent = "";
            }
        });

        // Form gönderildiğinde
        trainForm.addEventListener('submit', function(event) {
            event.preventDefault(); // Formun normal şekilde gönderilmesini engelle

            // Buton ve ilerleme çubuğunu ayarla
            trainButton.classList.add("d-none");
            progressContainer.classList.remove("d-none");
            resultMessage.classList.add("d-none");

            let timeLeft = estimatedSeconds;
            
            // Simüle edilmiş ilerleme sayacını başlat
            progressInterval = setInterval(() => {
                timeLeft--;
                const progressPercent = Math.min(99, ((estimatedSeconds - timeLeft) / estimatedSeconds) * 100);
                progressBar.style.width = `${progressPercent}%`;
                progressText.textContent = `Processing... Estimated time remaining: ${Math.max(0, timeLeft)}s`;
            }, 1000);

            // Gerçek backend isteğini gönder
            const formData = new FormData(trainForm);
            fetch(trainForm.action, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                   throw new Error("Server responded with an error.");
                }
                // Yanıt başarılı ama içeriğiyle ilgilenmiyoruz, sadece bittiğini bilmek istiyoruz.
                return response;
            })
            .then(data => {
                showResult("Model successfully trained with new data.", "alert-success");
            })
            .catch(error => {
                console.error("Training failed:", error);
                showResult("An error occurred during training. Please try again.", "alert-danger");
            })
            .finally(() => {
                // Her durumda (başarı veya hata) ilerleme çubuğunu durdur ve temizle
                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                progressText.textContent = "Finalizing...";

                // Kısa bir gecikmeyle arayüzü sıfırla
                setTimeout(() => {
                    trainButton.classList.remove("d-none");
                    progressContainer.classList.add("d-none");
                    progressBar.style.width = '0%';
                }, 1500);
            });
        });

        function showResult(message, alertClass) {
            resultMessage.textContent = message;
            resultMessage.className = `alert ${alertClass} mt-4`; // Mevcut sınıfları temizle
        }
    });
</script>
}